/*----------------------------( rexx )------------------------------*/
/*                                                                  */
/*  Exec:    GETPTF                                                 */
/*                                                                  */
/*  Purpose: This exec will download and unterse a single PTF file  */
/*           from IBM's ServiceLink FTP server.                     */
/*                                                                  */
/*  Author:  Jim Blalock, Clemson University   (carey@clemson.edu)  */
/*                                                                  */
/*  Format:  %GETPTF ORDER(<order>) USER(<user>) PASS(<pass>)       */
/*           where:                                                 */
/*             <order> is the SRD 9-digit order number.             */
/*             <user> is the userid to log onto IBM's PTF site.     */
/*                    This is usually the same as your IBMlink ID.  */
/*             <pass> is the password for the PTF site.  Refer to   */
/*                    your order status in SRD.                     */
/*            The parms can be in any order;  all are required.     */
/*                                                                  */
/*  Inputs:  Parameters from command line                           */
/*                                                                  */
/*  Workfiles: DDname INPUT is dynamically allocated and loaded     */
/*             with FTP commands.  This uses a temporary dataset.   */
/*                                                                  */
/*  Outputs: . PTF files created;  error messages otherwise.        */
/*             .. mlst0123.servlink  -> userid.mlst0123.txt         */
/*             .. mptf0123.servlink  -> userid.mptf0123.ptf         */
/*           . userid.mptf0123.tersed is also created, and left in  */
/*             place for debugging if needed.                       */
/*           . Various success or failure messages as needed.       */
/*                                                                  */
/*  Dependencies:                                                   */
/*     IBM's FTP server name (see "global variables")               */
/*     IBM's filename conventions for files to be downloaded        */
/*     Location, name & parms for unterse program (see "globals")   */
/*     Length of order number string (forced to 9 at present)       */
/*     Userid, password and filenames on FTP server are forced      */
/*       to lowercase                                               */
/*     ALLOC commands generated by the exec may need to be changed  */
/*       to reflect local DFSMS environments.                       */
/*     Developed and tested using TCP/IP For MVS 3.1 and TSO/E 2.5. */
/*                                                                  */
/*                                                                  */
/*  History: 08/20/1997 - New                                       */
/*           01/22/1998 JCB - Changed SRD filenames from            */
/*                        *.SERVLINK to MLST*.TXT and MPTF*.BIN.    */
/*                        If this needs to be changed again, look   */
/*                        for lines marked @C1.                     */
/*                                                                  */
/*------------------------------------------------------------------*/

/*------------------------------------------------------------------*/
/* Global variables.                                                */
/*------------------------------------------------------------------*/
ftp_server= "ptf.software.ibm.com";           /* IBM's FTP server   */
terseprog = "'SYS2.EXPEDITE.TERSE.LOADLIB(TRSUNPCK)'";
terseparm = "'UNPACK'";
changedate = "22 Jan 1998"

/*------------------------------------------------------------------*/
/* Say hello.                                                       */
/*------------------------------------------------------------------*/
say " ";
say "GETPTF exec version 1.0 - last updated " || changedate || "."
say " ";

/*------------------------------------------------------------------*/
/*  Parse command line and sanitize input.                          */
/*------------------------------------------------------------------*/
order = " ";
user  = " ";
pass  = " ";
parse upper arg "ORDER(" order ")" ,
        1 "USER(" user ")" ,
        1 "PASS(" pass ")";
if order = " " | user = " " | pass = " " ,
  then signal usage;
if length(order) ¬= 9 ,
  then signal usage;
user = lower(user);                      /* Must be on a Unix box;  */
pass = lower(pass);                      /* everything's lowercase  */
ordernum = substr(order,6,4);

/*------------------------------------------------------------------*/
/*  Generate dataset names.                                         */
/*------------------------------------------------------------------*/
userid = SYSVAR("sysuid");
mlst = "MLST" || ordernum;
mptf = "MPTF" || ordernum;
mlstsrc   = mlst || ".TXT";  mlstsrc = lower(mlstsrc);         /*@C1*/
mptfsrc   = mptf || ".BIN";  mptfsrc = lower(mptfsrc);         /*@C1*/
mlstdest  = "'" || userid || "." || mlst || ".LST'";
mptfdest  = "'" || userid || "." || mptf || ".PTF'";
mptfterse = "'" || userid || "." || mptf || ".TERSED'";

/*------------------------------------------------------------------*/
/*  Clean up existing datasets, if they exist.                      */
/*------------------------------------------------------------------*/
if listdsi(mlstdest)  = 0   then x = command("DELETE " mlstdest);
if listdsi(mptfdest)  = 0   then x = command("DELETE " mptfdest);
if listdsi(mptfterse) = 0   then x = command("DELETE " mptfterse);

/*------------------------------------------------------------------*/
/*  Create FTP commands in DDname //INPUT, then call FTP.           */
/*------------------------------------------------------------------*/
"FREE FI(INPUT)";
"ALLOC FI(INPUT) SPACE(1 1) TRACK LRECL(80) BLKSIZE(7200) RECFM(F B)";
if rc > 0 then signal alloc_failed;
ftpcmd.0 = 7; /* <<< */
ftpcmd.1 = user;
ftpcmd.2 = pass;
ftpcmd.3 = "CD /" || order;
/* ftpcmd.4 = "LOCSITE LRECL=80 BLK=7200 RECFM=FB PRI=1 SEC=3 TRACKS";*/
/* ftpcmd.5 = "GET " || mlstsrc mlstdest; */
ftpcmd.4 = "BINARY";
ftpcmd.5 = "LOCSITE LRECL=1024 BLK=10240 RECFM=FB PRI=25 SEC=99 TRACKS";
ftpcmd.6 = "GET " || mptfsrc mptfterse;
ftpcmd.7 = "QUIT";
"EXECIO * DISKW input (STEM ftpcmd. FINIS)";

/*------------------------------------------------------------------*/
/* Need to see the FTP commands?  Uncomment the following.          */
/*------------------------------------------------------------------*/
/*   say "Generated FTP commands:"                                  */
/*   do i = 1 to ftpcmd.0;                                          */
/*     say "*** " || ftpcmd.i;                                      */
/*   end;                                                           */
/*------------------------------------------------------------------*/

x = command("FTP" ftp_server);     /* Hard stuff's done; go get it! */

/*------------------------------------------------------------------*/
/*  We should have something in MLSTDEST and MPTFTERSE.  The        */
/*  MPTFTERSE dataset needs to be run through the UNTERSE utility.  */
/*------------------------------------------------------------------*/
/*x = listdsi(mlstdest); */
/*if x > 0 then signal dataset_not_created; */
x = listdsi(mptfterse);
if x > 0 then signal dataset_not_created;
x = command("ALLOC FI(INFILE) DA(" || mptfterse || ")");
x = command("ALLOC FI(OUTFILE) DA(" || mptfdest || ") NEW CAT " ,
  "SPACE(100 200) TRACK LRECL(80) BLKSIZE(7200) RECFM(F B) RELEASE");
x = command("CALL " || terseprog || " " || terseparm);
if x ¬= 0 then signal dataset_not_unpacked;

/*------------------------------------------------------------------*/
/* Looks like we did it.  Say something congratulatory and quit.    */
/*------------------------------------------------------------------*/
x = cleanup();
say " ";
say "GETPTF exec ended.  Your PTF is in " || mptfdest || ".";
say " ";
exit 0;

/*------------------------------------------------------------------*/
/*  Error routines.                                                 */
/*------------------------------------------------------------------*/
usage:
  say "                                                       ";
  say "Usage:";
  say "                                                       ";
  say "   GETPTF USER(<user>) PASS(<password>) ORDER(<order>) ";
  say "                                                       ";
  say "Where:";
  say "                                                       ";
  say "   <user> is the userid to use at the IBM FTP server   ";
  say "   <pass> is the password for <user>                   ";
  say "   <order> is the 9-digit order number from SRD.       ";
  say "                                                       ";
  say "If you are missing any of this info, look your order up";
  say "under SRD and note the userid, password and order number.";
  exit 8;

alloc_failed:
  say "TSO ALLOCATE command failed.";
  x = cleanup();
  exit 8;

dataset_not_created:
  say "Dataset not created by FTP.";
  x = cleanup();
  exit 8;

dataset_not_unpacked:
  say "Dataset not unpacked by UNTERSE utility.";
  x = cleanup();
  exit 8;

cleanup: procedure;                /* Free potentially alloc'd DDs. */
  x = command("FREE FI(INPUT)");
  x = command("FREE FI(INFILE)");
  x = command("FREE FI(OUTFILE)");
  return(0);

/*---------------------------------------------------------------*/
/* Function to lowercase a string.  Dunno why it's not standard. */
/*---------------------------------------------------------------*/
lower: procedure;
  arg string;
  tablein  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  tableout = "abcdefghijklmnopqrstuvwxyz";
  lstring = translate(string,tableout,tablein);
  return(lstring);

/*---------------------------------------------------------------*/
/*   Simple function to execute a TSO command (maybe).  It       */
/*   returns the command's return code, as follows:              */
/*      x = command("command string")                            */
/*      if x ¬= 0 then say "Command blew up", etc.               */
/*---------------------------------------------------------------*/
command: procedure;
  issue_commands = TRUE;            /* Set to FALSE for testing. */
  arg command_string;
  if issue_commands = TRUE then prefix = "  Command: ";
  else prefix = "  Testing: ";
  say prefix command_string;
  if issue_commands = TRUE then do;
    command_string;
    result = rc;
  end;
  else result = 0;
  return(result);

/*------------------------( the end )----------------------------*/
